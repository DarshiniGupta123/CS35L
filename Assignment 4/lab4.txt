(1) First, to get the old, buggy version of coreutils, I use the command
wget https://web.cs.ucla.edu/classes/fall18/cs35L/assign
/coreutils-with-bug.tar.gz

As in the previous lab, I had to untar this file using the 
tar -xzf coreutils-with-bug.tar.gz command and then use the configure
in the coreutils-with-bug directory.

cd coreutils-with-bug
./configure CFLAGS="-g -O0"

I tried to compile all the progam files and create executables using the 
command make, but I got an error:

utimens.h:2:5: error: conflicting types for 'futimens'
 int futimens (int, char const *, struct timespec const [2]);
     ^
In file included from utimecmp.h:25:0,
                 from utimecmp.c:25:
/usr/include/sys/stat.h:373:12: note: previous declaration of 
'futimens' was here
 extern int futimens (int __fd, const struct timespec __times[2]) __THROW;

This version of coreutils is buggy and has produced an error,
so we try to fix it by using the patch.

(2) To get the patch, I use the command:
wget https://web.cs.ucla.edu/classes/fall18/cs35L/assign/coreutils.diff

Since we want the changes made in the coreutils.diff, this is going to be
the patch file and we use the command patch -p0 < coreutils.diff.
The output of this command was:

patching file lib/utimens.c
patching file lib/utimens.h
patching file src/copy.c
patching file src/tee.c
patching file src/touch.c

Now that the patch has been applied, we try to build the program again
using the make command, and this time there was no error. The patch
renamed function names like tee and futimens by adding a coretuils_ in 
front of them.

(3) Now I look at the bug in the ls -t command and try to reproduce it
using the steps and commands listed in the spec.

$ tmp=$(mktemp -d)
$ cd $tmp
$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ sleep 1
$ touch now1
$ TZ=UTC0 ~/coreutils-with-bug/src/ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 darshini csugrad 0 1918-11-11 11:00:00.000000000 +0000 
wwi-armistice
-rw-r--r-- 1 darshini csugrad 0 2018-11-02 16:56:56.279953427 +0000 now1
-rw-r--r-- 1 darshini csugrad 0 2018-11-02 16:56:51.900806036 +0000 now
$ cd
$ rm -fr $tmp

This reproduces the bug, since the 1918 file is on top and the 2018
files are on the bottom.

(4) To find the error in the ls command I need to use the debugger for
the buggy ls program, which is in the ~/coreutils-with-bug/src/ls
directory so I run the command:
gdb ~/coreutils-with-bug/src/ls

Inside the debugger, I run the info functions command, as listed in the 
hints of the slides, that gives clues on the functions that are useful
to us.

(5) One of the first functions is get_stat_atime(const struct stat *), 
and I set a breakpoint at this function since this function deals with 
time.

(gdb) break get_stat_atime

Then I use the list command, to see the contents of this function
 
(gdb) list 

After looking at the contents of this function, I can deduce this is not
where the error is since this function does not compare file times
and does not modify how they are sorted.

(6) I go to info functions again, and I look at functions that compare 
file times and I see compare_atime and I set a breakpoint there
(gdb) break compare_atime and use list, but then see in the function
that it just intializes things.

(7) I look in info functions again and under the compare_atime in the 
ls.c file, I see another compare fucntion compare_ctime, and I set a 
breakpoint there as well and use the run -lt and then use the command 
si (step into) to go through the functions. These functions did not seem 
to effect the order of the files.

(8) Next I set a breakpoint at compare_mtime
(gdb) compare_mtime
(gdb) run -lt
(gdb) si
(gdb) list

The list command shows the contents the compare_mtime. In the function
there is a diff variable which calls the timepec_cmp function and then
the diff is returned. So I need to see what occurs in the timespec_c
fucntion.

(9) I set a breakpoint at the timespec_cmp and then ran the commands
(gdb) break timespec_cmp
(gdb) si
(gdb) c
(gdb) list

Inside the timespec_cmp function, the diff variable is set to the 
subtraction of a.tv_spec and b.tv_sec. This may be the cause of the 
error because there is a possibilty of overflow whenever adding
and subtracting. Instead of using the subtracting method to determine
the newness of the files, we can do a straight comparison using
if else statements. 

(10) To modify the timepec_cmp function which is located in the 
timespech.h file, I have to cp lib/timespec.h timespec.h, and now
I can edit the timespec.h file.

Modified code:
 if (a.tv_sec > b.tv_sec)
    return 1;
  else if (a.tv_sec < b.tv_sec)
    return -1;
  else
    return 0;

(11) Then to create lab.diff I use the command 
diff -u lib/timespec.h timespec.h > lab4.diff

Since in the spec, it says that the lab4.diff file has to be in Change
Log format, I emacs into lab4.diff, and then use the command C-x 4 a, which 
highlighted all the changes I made to the file.

(12) After making the diff file, I go to the home directory and use the 
commands outlined in the spec, but without making the tmp directories, 
as outlined by the spec.

$ touch -d '1918-11-11 11:00 GMT' wwi-armistice
$ touch now
$ touch now1
$ TZ=UTC0 ls -lt --full-time wwi-armistice now now1
-rw-r--r-- 1 darshini csugrad 0 2054-12-17 17:28:16.000000000 +0000 
wwi-armistice
-rw-r--r-- 1 darshini csugrad 0 2018-11-03 03:13:56.214006000 +0000 now1
-rw-r--r-- 1 darshini csugrad 0 2018-11-03 03:13:50.155866000 +0000 now
 
This correctly orders the file with respect to the time now. However, it
seems that the date for the 1918 file becomes 2054 and SEASnet thinks 
this file was created in the future. Due to SEASnet having 32 bit unsigned 
time stamps which causes the system to think everything before 1979,
which was when SEASnet was created, to wrap around to a future date.
